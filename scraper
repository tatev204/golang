package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"time"

	"github.com/chromedp/chromedp"
)

type Job struct {
	Title   string `json:"title"`
	Company string `json:"company"`
}

func main() {

	opts := append(chromedp.DefaultExecAllocatorOptions[:],
		chromedp.ExecPath(`C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe`),
	)

	allocCtx, cancel := chromedp.NewExecAllocator(context.Background(), opts...)
	defer cancel()

	ctx, cancel := chromedp.NewContext(allocCtx)
	defer cancel()

	ctx, cancel = context.WithTimeout(ctx, 30*time.Second)
	defer cancel()

	url := "https://staff.am/am/jobs"
	var jobs []Job

	err := chromedp.Run(ctx,
		chromedp.Navigate(url),

		chromedp.WaitVisible(`a[href*="/am/jobs/"]`, chromedp.ByQuery),

		chromedp.EvaluateAsDevTools(`
			Array.from(document.querySelectorAll('a[href*="/am/jobs/"]')).map(jobLink => {
				const title = jobLink.innerText.trim();
				const company = jobLink
					.closest("div")
					?.querySelector('a[href*="/am/company/"] div')?.innerText.trim() || "";
				return { title, company };
			});
		`, &jobs),
	)
	if err != nil {
		log.Fatal(err)
	}

	data, _ := json.MarshalIndent(jobs, "", "  ")
	fmt.Println(string(data))
}
